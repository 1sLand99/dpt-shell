plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.luoye.dpt"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        multiDexEnabled false

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                abiFilters "armeabi-v7a","arm64-v8a","x86","x86_64"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.18.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

afterEvaluate{ Project project ->
    def assembleTask = project.tasks.getByName("assemble")
    def nativeBuildTask = project.tasks.getByName("externalNativeBuildDebug")

    def archMap = [
            "armeabi-v7a":"arm",
            "arm64-v8a":"arm64",
            "x86":"x86",
            "x86_64":"x86_64"
    ]

    assembleTask.doLast {
        if (project.name != "shell") {
            printf("%s:%s skip\n", project.name,name)
            return
        }
        def sourceSoLibsDir = file(project.buildDir.absolutePath + File.separator
            + "intermediates" + File.separator
            + "stripped_native_libs" + File.separator
            + "release" + File.separator
            + "out" + File.separator
            + "lib" + File.separator
        )
        def targetDir = file(project.rootDir.absolutePath + File.separator + "executable" + File.separator + "shell-files")
        def targetSoLibsDir = file(targetDir.absolutePath + File.separator + "libs")

        println("[" + name + "] " + sourceSoLibsDir.absolutePath + " -> " + targetSoLibsDir.absolutePath)

        delete(targetDir)

        copy {
            from project.buildDir.absolutePath + File.separator + "intermediates" + File.separator + "dex" + File.separator + "debug" + File.separator + "mergeDexDebug" + File.separator + "classes.dex"
            into targetDir.absolutePath + File.separator + "dex"
        }

        for(e in archMap) {
            copy {
                from file(sourceSoLibsDir.absolutePath + File.separator
                        + e.key)
                into file(targetSoLibsDir.absolutePath + File.separator
                        + e.value)
            }
        }
    }

    nativeBuildTask.doLast {
        if (project.name != "shell") {
            printf("%s:%s skip\n", project.name ,name)
            return
        }
        def sourceDir = file(project.buildDir.absolutePath + File.separator
                + "intermediates" + File.separator
                + "cmake" + File.separator
                + "debug" + File.separator
                + "obj" + File.separator)

        def targetDir = file(project.projectDir.absolutePath + File.separator
            + "src" + File.separator
            + "main" + File.separator
            + "assets" + File.separator
            + "vwwwwwvwww")

        println("[" + name + "] " + sourceDir.absolutePath + " -> " + targetDir.absolutePath)
        delete(targetDir)

        for(e in archMap) {
            copy {
                from file(sourceDir.getAbsolutePath() + File.separator
                        + e.key)
                into file(targetDir.getAbsolutePath() + File.separator
                        + e.value)
            }
        }
    }

}

dependencies {

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.annotation:annotation:1.0.0'
}